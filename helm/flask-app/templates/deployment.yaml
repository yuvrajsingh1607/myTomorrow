apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}
  labels:
    app: {{ .Release.Name }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}
    spec:
      terminationGracePeriodSeconds: 30
      # ensures that the application pods don't run on the same node.
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - {{ .Release.Name }}
                topologyKey: "kubernetes.io/hostname"
      containers:
        - name: flask-app
          image: {{ .Values.image.repository }}:{{ .Values.image.tag }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - containerPort: {{ .Values.ports.containerPort }}
          env:
            - name: SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-secret
                  key: secret_key
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-secret
                  key: db_password
            - name: API_BASE_URL
              value: {{ .Values.env.API_BASE_URL }}
            - name: LOG_LEVEL
              value: {{ .Values.env.LOG_LEVEL }}
            - name: MAX_CONNECTIONS
              value: "{{ .Values.env.MAX_CONNECTIONS }}"
          #  Define CPU and memory requirements for the container.
          resources:
            requests:
              cpu: {{ .Values.resources.requests.cpu }}
              memory: {{ .Values.resources.requests.memory }}
            limits:
              cpu: {{ .Values.resources.limits.cpu }}
              memory: {{ .Values.resources.limits.memory }}
          # Ensures the application is healthy and ready by checking the /healthz endpoint
          livenessProbe:
            httpGet:
              path: /healthz
              port: {{ .Values.ports.containerPort }}
            initialDelaySeconds: 15
            periodSeconds: 5
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /healthz
              port: {{ .Values.ports.containerPort }}
            initialDelaySeconds: 5
            periodSeconds: 5
            failureThreshold: 3
